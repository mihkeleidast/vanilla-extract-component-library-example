/* eslint-env node */
/* eslint-disable @typescript-eslint/no-var-requires */

const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const { VanillaExtractPlugin } = require("@vanilla-extract/webpack-plugin");

const pkg = require("./package.json");

module.exports = (env, argv) => {
  const { mode = "development" } = argv;
  const isProduction = mode === "production";

  return {
    mode,
    entry: "./src/index.tsx",
    output: {
      path: path.resolve(__dirname, "./dist"),
      chunkFilename: "[name].js",
    },
    resolve: {
      extensions: [".js", ".jsx", ".json", ".ts", ".tsx"],
      modules: [path.resolve(__dirname, "node_modules")],
    },
    module: {
      rules: [
        {
          test: /\.(t|j)sx?$/,
          exclude: /node_modules/,
          use: "babel-loader",
        },
        {
          test: /.css$/,
          exclude: /\.vanilla\.css$/i,
          use: [MiniCssExtractPlugin.loader, "css-loader"],
        },
        {
          test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: require.resolve("css-loader"),
              options: {
                url: false, // Required as image imports should be handled via JS/TS import statements
              },
            },
          ],
        },
      ],
    },
    devtool: isProduction ? "source-map" : "inline-source-map",
    plugins: [
      new HtmlWebpackPlugin({
        title: pkg.description,
        template: "src/index.ejs",
      }),
      new CleanWebpackPlugin(),
      new VanillaExtractPlugin(),
      new MiniCssExtractPlugin(),
    ],
    optimization: {
      splitChunks: {
        chunks: "all",
        minSize: 0,
        minRemainingSize: 0,
        minChunks: 1,
        maxAsyncRequests: 30,
        maxInitialRequests: 30,
        enforceSizeThreshold: 50000,
        cacheGroups: {
          defaultVendors: {
            test: /[\\/]node_modules[\\/]/,
            name: "vendors",
            priority: -10,
            reuseExistingChunk: true,
          },
          default: {
            minChunks: 2,
            priority: -20,
            reuseExistingChunk: true,
          },
        },
      },
    },
  };
};
